# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Mateusz Miku≈Ça <mati865@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Yuui Tanabe <yuuitanabe@163.com>


# We can switch to clang when it fully works with mingw-w64
_compiler=gcc
_generator="MSYS Makefiles"
#_generator="Ninja"
if [ "${_generator}" = "Ninja" ]; then
  _make_cmd="ninja"
else
  _make_cmd="make"
fi
_realname=clang
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-clang-analyzer"
         "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt"
         "${MINGW_PACKAGE_PREFIX}-libc++"
         "${MINGW_PACKAGE_PREFIX}-libc++abi"
         "${MINGW_PACKAGE_PREFIX}-libunwind"
         "${MINGW_PACKAGE_PREFIX}-lld"
         "${MINGW_PACKAGE_PREFIX}-lldb"
         "${MINGW_PACKAGE_PREFIX}-llvm"
         "${MINGW_PACKAGE_PREFIX}-polly")
pkgver=7.0.0
pkgrel=1
pkgdesc="C language family frontend for LLVM (mingw-w64)"
arch=('any')
url="https://llvm.org/"
license=("custom:University of Illinois/NCSA Open Source License")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake>=3.4.3"
             "${MINGW_PACKAGE_PREFIX}-z3"
             "${MINGW_PACKAGE_PREFIX}-libffi"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx"
             "${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-swig"
             "tar"
             "groff"
             $([[ "$_compiler" == "clang" ]] && echo \
               "${MINGW_PACKAGE_PREFIX}-clang")
             $([[ "$_generator" == "Ninja" ]] && echo \
               "${MINGW_PACKAGE_PREFIX}-ninja")
             )
depends=("${MINGW_PACKAGE_PREFIX}-gcc")
options=('!debug' 'strip')
source=(https://releases.llvm.org/${pkgver}/llvm-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/cfe-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/compiler-rt-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/test-suite-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/libcxx-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/libcxxabi-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/clang-tools-extra-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/lld-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/lldb-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/libunwind-${pkgver}.src.tar.xz{,.sig}
        https://releases.llvm.org/${pkgver}/polly-${pkgver}.src.tar.xz{,.sig}
        "0001-mingw-w64-use-MSVC-style-ByteAlignment.patch"
        "0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
        "0003-Globally-provide-DESTDIR-for-all-platforms.patch"
        "0004-llvm-config-look-for-unversioned-shared-lib-on-win32.patch"
        "0005-add-pthread-as-system-lib-for-mingw.patch"
        "0006-add-coff-exported-flag.patch"
        "0007-getLoadAddressWithOffset-assertion.patch"
        "0009-empty-target-prefix-only-msvc.patch"
        "0010-mbig-obj-for-all.patch"
        "0011-different-name-for-static-libraries.patch"
        "0012-fix-testplugin-linking.patch"
        "0101-Allow-build-static-clang-library-for-mingw.patch"
        "0102-fix-libclang-name-for-mingw.patch"
        "0103-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch"
        "0104-link-pthread-with-mingw.patch"
        "0106-MinGW-use-flto-visibility-public-std-CC1-arg-to-get-.patch"
        "0201-mingw-w64-__udivdi3-mangle-hack.patch"
        "0401-mingw-w64-hack-and-slash-fixes-for-libc.patch"
        "0405-fix-conflict-win32-posix-threads.patch"
        "0501-fixes-to-get-lldb-building.patch"
        "0503-lldb-find-mingw-python.patch"
        "0504-fix-lldb-library-name-mingw.patch"
        "0505-use-gnu-printf.patch"
        "0506-mingw-python-posix-like.patch"
        "0507-declare-exports-for-all-windows-platforms.patch"
        "0801-Don-t-build-LLVMPolly-on-WIN32.patch")
# Some patch notes :)
#0001-0099 -> llvm
#0101-0199 -> clang
#0201-0299 -> rt
#0301-0399 -> lld
#0401-0499 -> libc++
#0501-0599 -> lldb
#0601-0699 -> libunwind
#0701-0799 -> libc++abi
#0801-0899 -> polly
sha256sums=('8bc1f844e6cbde1b652c19c1edebc1864456fd9c78b8c1bea038e51b363fe222'
            'SKIP'
            '550212711c752697d2f82c648714a7221b1207fd9441543ff4aa9e3be45bba55'
            'SKIP'
            'bdec7fe3cf2c85f55656c07dfb0bd93ae46f2b3dd8f33ff3ad6e7586f4c670d6'
            'SKIP'
            '97f0dc3fe4ad3613218115e914096e82b38c9aa865d5e3fbc8bd6b82ca7ee343'
            'SKIP'
            '9b342625ba2f4e65b52764ab2061e116c0337db2179c6bce7f9a0d70c52134f0'
            'SKIP'
            '9b45c759ff397512eae4d938ff82827b1bd7ccba49920777e5b5e460baeb245f'
            'SKIP'
            '937c5a8c8c43bc185e4805144744799e524059cac877a44d9063926cd7a19dbe'
            'SKIP'
            'fbcf47c5e543f4cdac6bb9bbbc6327ff24217cd7eafc5571549ad6d237287f9c'
            'SKIP'
            '7ff6d8fee49977d25b3b69be7d22937b92592c7609cf283ed0dcf9e5cd80aa32'
            'SKIP'
            '50aee87717421e70450f1e093c6cd9a27f2b111025e1e08d64d5ace36e338a9c'
            'SKIP'
            '919810d3249f4ae79d084746b9527367df18412f30fe039addbf941861c8534b'
            'SKIP'
            'd5b11097084f8a03dd3002c2adb27b4fec99cf290404049f1a4e1185274bde67'
            '5081a1a9d8074b275f3087d4d80a13ce5d1c20bc1962819953790e54275930c8'
            'c4e7e1945e60ce3fb4005069c499103432e4fb7c85625f33cbbba9eca9b261ef'
            '1f318c0370357fdf9c54ae6d31bad761b0caa58ac099998937b636309ecb6590'
            '7f0c64cd87b61e894be632f180ae5291e1aa9f1d9d382608f659067eeeda7146'
            '2c2431997e664c5b42b359f4134a4773578753e5e25c505ba30de42d357f3057'
            '1887ea21fcd591a50dd10559774e872ce1183177e672b028133d9b669e3cac32'
            '33400d16d5f6671a8fd60345c3ae44b9777a7d600061957889d14305eb2ad709'
            '1c9efccd40a0e7834c3aa9d819aa25cfdd2cec389d1bd3e8a89bc9ff670a0129'
            '18e719f49af8704c66d7d5e0c0c94ab04a7206fe2a3d711eb652e0afb35ff52c'
            'cc6e0c2a507578f91e3caf8be2629fd4f330a785741245dde8fcb0efaffeb151'
            'f2b0403e6b6cafddf364a90a6bb1e57793fd98d6f80f8976a87574cd93eb1d1a'
            'b1ed2ccdb87bb4f024a5cd750e71de3706fd24ccfeb87835403dab84ef7a9019'
            'ab49b90d69a609f441fa58e835873f2b1a8a060c9ca6358fee7d99c1973da692'
            '53646dd01af2862473e9719c5223366486268891ccbff86413943a432a8342e9'
            '3d6045cf35d5523c68baf87bd490007d4ac8fe3eabcbc23d8c66e80ff1c234e7'
            'bafaf7d06bec3ed7fba58e8a926e7b472b5e16442b6ee9dd8c7ee6c0cce9792a'
            'da44cca549bc7fb9e04f0f038a1ed68ba99cdfec834fc241ab13880bd0aa3b0f'
            '2f8f3c819837e4a16a364ed6e2a0a879cd10f924169ed7d89c27c1ed64edfe95'
            '4d84985dc1fd8cccb6ad6d4629cddff310ac14defbea9a6df97cb55fd0ac34a0'
            'bb78e162cccd926feadecd89e6352e12b40f3d3ccc6b444e4e39383cc44286c2'
            '769a8286ff528178256cc6001bb21562857ba9e9ab2214e5709b030d1b684ace'
            'b06014b98f96249386a75f3282c863a932efab5519a81dd68d28f8565ee91589'
            'dc758dfd564db316c717fe1ab201a432a47b2327ecf8835d28b1e2daad5962a6'
            '78d52a2e11b3e6d0acbaab8b603921674dfed70062bf3aaf37ce1961de68d416'
            'bc394e597f8939b6f6630bd88c990f951738aaadacded2f3be71c658e9608fe7')
validpgpkeys=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D'  # Hans Wennborg, Google.
              '474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard
noextract=(cfe-${pkgver}.src.tar.xz
           libcxx-${pkgver}.src.tar.xz
           lldb-${pkgver}.src.tar.xz
           test-suite-${pkgver}.src.tar.xz)

prepare() {
  plain "Extracting clang-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/cfe-${pkgver} ]] && rm -rf ${srcdir}/cfe-${pkgver}
  [[ -d ${srcdir}/cfe-${pkgver} ]] || tar -xJvf ${srcdir}/cfe-${pkgver}.src.tar.xz -C ${srcdir} || true

  plain "Extracting libcxx-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/libcxx-${pkgver} ]] && rm -rf ${srcdir}/libcxx-${pkgver}
  [[ -d ${srcdir}/libcxx-${pkgver} ]] || tar -xJvf ${srcdir}/libcxx-${pkgver}.src.tar.xz -C ${srcdir} || true

  plain "Extracting lldb-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/lldb-${pkgver} ]] && rm -rf ${srcdir}/lldb-${pkgver}
  [[ -d ${srcdir}/lldb-${pkgver} ]] || tar -xJvf ${srcdir}/lldb-${pkgver}.src.tar.xz -C ${srcdir} || true

  cd "${srcdir}/llvm-${pkgver}.src"
  patch -p1 -i "${srcdir}/0001-mingw-w64-use-MSVC-style-ByteAlignment.patch"
  patch -p1 -i "${srcdir}/0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
  patch -p1 -i "${srcdir}/0003-Globally-provide-DESTDIR-for-all-platforms.patch"
  patch -p1 -i "${srcdir}/0004-llvm-config-look-for-unversioned-shared-lib-on-win32.patch"
  patch -p1 -i "${srcdir}/0005-add-pthread-as-system-lib-for-mingw.patch"
  patch -p1 -i "${srcdir}/0009-empty-target-prefix-only-msvc.patch"
  patch -p1 -i "${srcdir}/0010-mbig-obj-for-all.patch"
  patch -p1 -i "${srcdir}/0012-fix-testplugin-linking.patch"

  # https://bugs.llvm.org/show_bug.cgi?id=25493
  patch -p1 -i "${srcdir}/0006-add-coff-exported-flag.patch"
  # https://bugs.llvm.org/show_bug.cgi?id=30584
  patch -p1 -i "${srcdir}/0007-getLoadAddressWithOffset-assertion.patch"

  cd "${srcdir}/cfe-${pkgver}.src"
  patch -p1 -i "${srcdir}/0101-Allow-build-static-clang-library-for-mingw.patch"
  patch -p1 -i "${srcdir}/0102-fix-libclang-name-for-mingw.patch"
  patch -p1 -i "${srcdir}/0103-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch"
  patch -p1 -i "${srcdir}/0104-link-pthread-with-mingw.patch"
  patch -p1 -i "${srcdir}/0106-MinGW-use-flto-visibility-public-std-CC1-arg-to-get-.patch"

  cd "${srcdir}/compiler-rt-${pkgver}.src"
  patch -p1 -i "${srcdir}/0201-mingw-w64-__udivdi3-mangle-hack.patch"

  #cd "${srcdir}/lld-${pkgver}.src"

  cd "${srcdir}/libcxx-${pkgver}.src"
  patch -p1 -i "${srcdir}/0401-mingw-w64-hack-and-slash-fixes-for-libc.patch"
  patch -p1 -i "${srcdir}/0405-fix-conflict-win32-posix-threads.patch"

  cd "${srcdir}/lldb-${pkgver}.src"
  patch -p1 -i "${srcdir}/0501-fixes-to-get-lldb-building.patch"
  patch -p1 -i "${srcdir}/0503-lldb-find-mingw-python.patch"
  patch -p1 -i "${srcdir}/0504-fix-lldb-library-name-mingw.patch"
  patch -p1 -i "${srcdir}/0505-use-gnu-printf.patch"
  patch -p1 -i "${srcdir}/0506-mingw-python-posix-like.patch"
  patch -p1 -i "${srcdir}/0507-declare-exports-for-all-windows-platforms.patch"

  #cd "${srcdir}/libunwind-${pkgver}.src"

  #cd "${srcdir}/libcxxabi-${pkgver}.src"

  cd "${srcdir}/polly-${pkgver}.src"
  # With LLVM_LINK_LLVM_DYLIB=ON it's build before LLVM and fails with undefined references to LLVM functions
  patch -p1 -i "${srcdir}/0801-Don-t-build-LLVMPolly-on-WIN32.patch"

  # At the present, clang must reside inside the LLVM source code tree to build
  # See https://bugs.llvm.org/show_bug.cgi?id=4840

  cd "${srcdir}"/llvm-${pkgver}.src
  rm -rf tools/clang tools/clang/tools/extra tools/lld tools/lldb tools/polly projects/compiler-rt projects/libcxx \
         projects/libcxxabi projects/libunwind projects/test-suite | true
  mv "${srcdir}/cfe-${pkgver}.src"               tools/clang
  mv "${srcdir}/clang-tools-extra-${pkgver}.src" tools/clang/tools/extra
  mv "${srcdir}/lld-${pkgver}.src"               tools/lld
  mv "${srcdir}/lldb-${pkgver}.src"              tools/lldb
  mv "${srcdir}/polly-${pkgver}.src"             tools/polly
  mv "${srcdir}/compiler-rt-${pkgver}.src"       projects/compiler-rt
  mv "${srcdir}/libcxxabi-${pkgver}.src"         projects/libcxxabi
  mv "${srcdir}/libcxx-${pkgver}.src"            projects/libcxx
  mv "${srcdir}/libunwind-${pkgver}.src"         projects/libunwind
  #mv "${srcdir}/testsuite-${pkgver}.src"         projects/test-suite
}

build() {
  cd "${srcdir}"

  [[ -d build-${CARCH} ]] && rm -rf build-${CARCH}
  mkdir build-${CARCH} && cd build-${CARCH}

  local -a extra_config

  if check_option "debug" "y"; then
    extra_config+=(-DCMAKE_BUILD_TYPE=Debug)
    VERBOSE="VERBOSE=1"
  else
    extra_config+=(-DCMAKE_BUILD_TYPE=Release)
  fi

  # Include location of libffi headers in CPPFLAGS
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  # "Ninja" cant install each component seperately
  # https://github.com/martine/ninja/issues/932

  if [ "${_compiler}" == "clang" ]; then
    #export CC='clang -stdlib=libc++'
    #export CXX='clang++ -stdlib=libc++'
    export CC='clang'
    export CXX='clang++'
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"$_generator" \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
    -DCMAKE_C_FLAGS="${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} -D_GNU_SOURCE" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCLANG_ANALYZER_BUILD_Z3=ON \
    -DLIBCLANG_BUILD_STATIC=ON \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
    -DLIBCXX_HAS_WIN32_THREAD_API=ON \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBUNWIND_ENABLE_SHARED=OFF \
    -DLLVM_BUILD_STATIC=OFF \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_THREADS=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DLLVM_LINK_LLVM_DYLIB=OFF \
    -DLLVM_POLLY_LINK_INTO_TOOLS=OFF \
    -DLLDB_RELOCATABLE_PYTHON=ON \
    -DLLDB_USE_SYSTEM_SIX=ON \
    -DLLDB_DISABLE_PYTHON=ON \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python2.exe \
    "${extra_config[@]}" \
    ../llvm-${pkgver}.src

  ${_make_cmd}

  # Disable automatic installation of components that go into subpackages
  # -i.orig to check what has been removed in-case it starts dropping more than it should
  #
  sed -i.orig '/\(clang\|lld\|lldb\|polly\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i.orig '/\(extra\|scan-build\|scan-view\)\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
# sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' projects/cmake_install.cmake
  sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\|libunwind\)\/cmake_install.cmake/d' projects/cmake_install.cmake
}

#check() {
#  cd "${srcdir}"/build-${CARCH}
#  # Remove || true once testcase doesn't cause failures.
#  make check || true
#  make check-clang || true
#  make check-polly || true
#}

package_clang() {
  pkgdesc="C language family frontend for LLVM (mingw-w64)"
  url="https://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-gcc"
           "${MINGW_PACKAGE_PREFIX}-z3")

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/tools/clang DESTDIR="${pkgdir}" install

  # Install static libraries
  install -Dm644 ../build-${CARCH}/lib/libclang.a ${pkgdir}${MINGW_PREFIX}/lib/libclang.a
  install -Dm644 ../build-${CARCH}/lib/libclang.a ${pkgdir}${MINGW_PREFIX}/lib/libclang_static.a
}

package_clang-analyzer() {
  pkgdesc="A source code analysis framework (mingw-w64)"
  url="https://clang-analyzer.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-python2")

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/tools/clang/tools/scan-build -j1 DESTDIR="${pkgdir}" install
  ${_make_cmd} -C ../build-${CARCH}/tools/clang/tools/scan-view -j1 DESTDIR="${pkgdir}" install

  # Use Python 2
  sed -i \
    -e 's|env python$|&2|' \
    -e 's|/usr/bin/python$|&2|' \
    "${pkgdir}"${MINGW_PREFIX}/bin/scan-view

  # Compile Python scripts
  python2 -m compileall "${pkgdir}"${MINGW_PREFIX}/bin/clang-analyzer
  python2 -O -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  install -Dm644 LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/share/licenses/clang-analyzer/LICENSE
}

package_clang-tools-extra() {
  pkgdesc="Extra tools built using Clang's tooling APIs (mingw-w64)"
  url="https://clang.llvm.org/"

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/tools/clang/tools/extra -j1 DESTDIR="${pkgdir}" install
}

package_compiler-rt() {
  pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
  url="https://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "${srcdir}"/llvm-${pkgver}.src
  ${_make_cmd} -C ../build-${CARCH}/projects/compiler-rt DESTDIR="${pkgdir}" install
}

package_libcxx() {
  pkgdesc="C++ Standard Library (mingw-w64)"
  url="https://libcxx.llvm.org/"

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/projects/libcxx -j1 DESTDIR="${pkgdir}" install
}

package_libcxxabi() {
  pkgdesc="C++ Standard Library Support (mingw-w64)"
  url="https://libcxxabi.llvm.org/"
  # Don't depend on libunwind until it actually works as installing it breaks some packages
  #depends="${MINGW_PACKAGE_PREFIX}-libunwind"

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/projects/libcxxabi -j1 DESTDIR="${pkgdir}" install
}

package_libunwind() {
  pkgdesc='A new implementation of a stack unwinder for C++ exceptions (mingw-w64)'
  url='https://llvm.org/'

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/projects/libunwind -j1 DESTDIR="${pkgdir}" install
}

package_lld() {
  pkgdesc="Linker tools for LLVM (mingw-w64)"
  url="https://lld.llvm.org/"

  cd "${srcdir}/llvm-${pkgver}.src"
  ${_make_cmd} -C ../build-${CARCH}/tools/lld -j1 DESTDIR="${pkgdir}" install
}

package_lldb() {
  pkgdesc="Next generation, high-performance debugger (mingw-w64)"
  url="https://lldb.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-libxml2"
           "${MINGW_PACKAGE_PREFIX}-llvm"
           "${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-readline"
           "${MINGW_PACKAGE_PREFIX}-swig")

  cd "${srcdir}/llvm-${pkgver}.src"

  ${_make_cmd} -C ../build-${CARCH}/tools/lldb DESTDIR="${pkgdir}" install

  # Compile Python scripts
  python2 -m compileall "${pkgdir}${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "${pkgdir}${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"

  install -Dm644 tools/lldb/LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/lldb/LICENSE"
}

package_llvm() {
  pkgdesc="Low Level Virtual Machine (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-libffi"
           "${MINGW_PACKAGE_PREFIX}-gcc-libs") # "compiler-rt"

  cd "${srcdir}"/llvm-${pkgver}.src

  ${_make_cmd} -C ../build-${CARCH} DESTDIR="${pkgdir}" install

  # TODO: why CMake haven't included it?
  #cp ../build-${CARCH}/lib/libLLVM.dll.a "${pkgdir}/${MINGW_PREFIX}/lib/"

  install -Dm644 LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/llvm/LICENSE"

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/modules/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/modules/
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/platforms/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/platforms/

  # FileCheck is needed to build rust.
  install -Dm755 "${srcdir}"/build-${CARCH}/bin/FileCheck.exe "${pkgdir}${MINGW_PREFIX}/bin/FileCheck.exe"
  # fox cmake files.
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  sed -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${pkgdir}/${MINGW_PREFIX}/lib/cmake/llvm/LLVMExports.cmake
}

package_polly() {
  pkgdesc="Polly - Polyhedral optimizations for LLVM (mingw-w64)"
  url="https://polly.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "${srcdir}"/llvm-${pkgver}.src
  ${_make_cmd} -C ../build-${CARCH}/tools/polly DESTDIR="${pkgdir}" install
  # fox cmake files.
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  sed -e "s|${PREFIX_WIN}/bin/|${MINGW_PREFIX}/|g" -i "${pkgdir}/${MINGW_PREFIX}/lib/cmake/polly/PollyConfig.cmake"
}

# Wrappers
package_mingw-w64-i686-clang(){
  package_clang
}

package_mingw-w64-i686-clang-analyzer(){
  package_clang-analyzer
}

package_mingw-w64-i686-clang-tools-extra(){
  package_clang-tools-extra
}

package_mingw-w64-i686-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-i686-libc++abi(){
  package_libcxxabi
}

package_mingw-w64-i686-libc++(){
  package_libcxx
}

package_mingw-w64-i686-lld(){
  package_lld
}

package_mingw-w64-i686-lldb(){
  package_lldb
}

package_mingw-w64-i686-libunwind(){
  package_libunwind
}

package_mingw-w64-i686-llvm(){
  package_llvm
}

package_mingw-w64-i686-polly(){
  package_polly
}

package_mingw-w64-x86_64-clang(){
  package_clang
}

package_mingw-w64-x86_64-clang-analyzer(){
  package_clang-analyzer
}

package_mingw-w64-x86_64-clang-tools-extra(){
  package_clang-tools-extra
}

package_mingw-w64-x86_64-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-x86_64-libc++abi(){
  package_libcxxabi
}

package_mingw-w64-x86_64-libc++(){
  package_libcxx
}

package_mingw-w64-x86_64-lld(){
  package_lld
}

package_mingw-w64-x86_64-lldb(){
  package_lldb
}

package_mingw-w64-x86_64-libunwind(){
  package_libunwind
}

package_mingw-w64-x86_64-llvm(){
  package_llvm
}

package_mingw-w64-x86_64-polly(){
  package_polly
}
