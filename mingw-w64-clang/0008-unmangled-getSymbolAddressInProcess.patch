Index: examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h
===================================================================
--- a/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h	(revision 281247)
+++ b/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h	(working copy)
@@ -65,9 +65,10 @@
             return Sym;
           return JITSymbol(nullptr);
         },
-        [](const std::string &Name) {
+        [&](const std::string &Name) {
+          auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
           if (auto SymAddr =
-                RTDyldMemoryManager::getSymbolAddressInProcess(Name))
+                RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName))
             return JITSymbol(SymAddr, JITSymbolFlags::Exported);
           return JITSymbol(nullptr);
         });
Index: examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h
===================================================================
--- a/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h	(revision 281247)
+++ b/examples/Kaleidoscope/BuildingAJIT/Chapter2/KaleidoscopeJIT.h	(working copy)
@@ -75,9 +75,10 @@
             return Sym;
           return JITSymbol(nullptr);
         },
-        [](const std::string &Name) {
+        [&](const std::string &Name) {
+          auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
           if (auto SymAddr =
-                RTDyldMemoryManager::getSymbolAddressInProcess(Name))
+                RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName))
             return JITSymbol(SymAddr, JITSymbolFlags::Exported);
           return JITSymbol(nullptr);
         });
Index: examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h
===================================================================
--- a/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h	(revision 281247)
+++ b/examples/Kaleidoscope/BuildingAJIT/Chapter3/KaleidoscopeJIT.h	(working copy)
@@ -86,9 +86,10 @@
             return Sym;
           return JITSymbol(nullptr);
         },
-        [](const std::string &Name) {
+        [&](const std::string &Name) {
+          auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
           if (auto SymAddr =
-                RTDyldMemoryManager::getSymbolAddressInProcess(Name))
+                RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName))
             return JITSymbol(SymAddr, JITSymbolFlags::Exported);
           return JITSymbol(nullptr);
         });
Index: examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h
===================================================================
--- a/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h	(revision 281247)
+++ b/examples/Kaleidoscope/BuildingAJIT/Chapter4/KaleidoscopeJIT.h	(working copy)
@@ -112,9 +112,10 @@
             return Sym;
           return JITSymbol(nullptr);
         },
-        [](const std::string &Name) {
+        [&](const std::string &Name) {
+          auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
           if (auto SymAddr =
-                RTDyldMemoryManager::getSymbolAddressInProcess(Name))
+                RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName))
             return JITSymbol(SymAddr, JITSymbolFlags::Exported);
           return JITSymbol(nullptr);
         });
Index: examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/server.cpp
===================================================================
--- a/examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/server.cpp	(revision 281247)
+++ b/examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/server.cpp	(working copy)
@@ -84,7 +84,8 @@
 
   auto SymbolLookup =
     [](const std::string &Name) {
-      return RTDyldMemoryManager::getSymbolAddressInProcess(Name);
+      auto DemangledName = Mangler::getNameWithoutPrefix(Name);
+      return RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName);
     };
 
   auto RegisterEHFrames =
Index: examples/Kaleidoscope/include/KaleidoscopeJIT.h
===================================================================
--- a/examples/Kaleidoscope/include/KaleidoscopeJIT.h	(revision 281247)
+++ b/examples/Kaleidoscope/include/KaleidoscopeJIT.h	(working copy)
@@ -105,7 +105,9 @@
         return Sym;
 
     // If we can't find the symbol in the JIT, try looking in the host process.
-    if (auto SymAddr = RTDyldMemoryManager::getSymbolAddressInProcess(Name))
+    auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
+    if (auto SymAddr =
+        RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName))
       return JITSymbol(SymAddr, JITSymbolFlags::Exported);
 
     return nullptr;
Index: include/llvm/ExecutionEngine/RTDyldMemoryManager.h
===================================================================
--- a/include/llvm/ExecutionEngine/RTDyldMemoryManager.h	(revision 281247)
+++ b/include/llvm/ExecutionEngine/RTDyldMemoryManager.h	(working copy)
@@ -15,6 +15,8 @@
 #define LLVM_EXECUTIONENGINE_RTDYLDMEMORYMANAGER_H
 
 #include "llvm-c/ExecutionEngine.h"
+#include "llvm/IR/DataLayout.h"
+#include "llvm/IR/Mangler.h"
 #include "llvm/ExecutionEngine/JITSymbol.h"
 #include "llvm/ExecutionEngine/RuntimeDyld.h"
 #include "llvm/Support/CBindingWrapping.h"
@@ -58,11 +60,16 @@
 class RTDyldMemoryManager : public MCJITMemoryManager,
                             public JITSymbolResolver {
 public:
-  RTDyldMemoryManager() = default;
+  RTDyldMemoryManager() : DL(Mangler::getDefaultDataLayout()) {}
   RTDyldMemoryManager(const RTDyldMemoryManager&) = delete;
   void operator=(const RTDyldMemoryManager&) = delete;
   ~RTDyldMemoryManager() override;
 
+  /// Set the DataLayout used to demangle symbol names.
+  void setDataLayout(const DataLayout &DL) {
+    this->DL = DL;
+  }
+
   /// Register EH frames in the current process.
   static void registerEHFramesInProcess(uint8_t *Addr, size_t Size);
 
@@ -84,7 +91,8 @@
   /// This method returns the address of the specified function or variable.
   /// It is used to resolve symbols during module linking.
   virtual uint64_t getSymbolAddress(const std::string &Name) {
-    return getSymbolAddressInProcess(Name);
+    auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
+    return getSymbolAddressInProcess(DemangledName);
   }
 
   /// This method returns a RuntimeDyld::SymbolInfo for the specified function
@@ -142,6 +150,9 @@
   };
   typedef std::vector<EHFrame> EHFrameInfos;
   EHFrameInfos EHFrames;
+
+private:
+  DataLayout DL; ///< DataLayout used to demangle symbol names.
 };
 
 // Create wrappers for C Binding types (see CBindingWrapping.h).
Index: include/llvm/IR/Mangler.h
===================================================================
--- a/include/llvm/IR/Mangler.h	(revision 281247)
+++ b/include/llvm/IR/Mangler.h	(working copy)
@@ -49,6 +49,15 @@
                                 const DataLayout &DL);
   static void getNameWithPrefix(SmallVectorImpl<char> &OutName,
                                 const Twine &GVName, const DataLayout &DL);
+
+  /// Return the demangled version of the specified name using the rules of the
+  /// given DataLayout, or the current process DataLayout if none is provided.
+  static StringRef getNameWithoutPrefix(const StringRef &MangledName);
+  static StringRef getNameWithoutPrefix(const StringRef &MangledName,
+                                        const DataLayout &DL);
+
+  /// Return the default mangling DataLayout for the current process.
+  static const DataLayout &getDefaultDataLayout();
 };
 
 } // End llvm namespace
Index: lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp
===================================================================
--- a/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp	(revision 281247)
+++ b/lib/ExecutionEngine/RuntimeDyld/RTDyldMemoryManager.cpp	(working copy)
@@ -262,16 +262,7 @@
   // is called before ExecutionEngine::runFunctionAsMain() is called.
   if (Name == "__main") return (uint64_t)&jit_noop;
 
-  const char *NameStr = Name.c_str();
-
-  // DynamicLibrary::SearchForAddresOfSymbol expects an unmangled 'C' symbol
-  // name so ff we're on Darwin, strip the leading '_' off.
-#ifdef __APPLE__
-  if (NameStr[0] == '_')
-    ++NameStr;
-#endif
-
-  return (uint64_t)sys::DynamicLibrary::SearchForAddressOfSymbol(NameStr);
+  return (uint64_t)sys::DynamicLibrary::SearchForAddressOfSymbol(Name);
 }
 
 void *RTDyldMemoryManager::getPointerToNamedFunction(const std::string &Name,
Index: lib/IR/Mangler.cpp
===================================================================
--- a/lib/IR/Mangler.cpp	(revision 281247)
+++ b/lib/IR/Mangler.cpp	(working copy)
@@ -172,6 +173,26 @@
   raw_svector_ostream OS(OutName);
   getNameWithPrefix(OS, GV, CannotUsePrivateLabel);
 }
+
+StringRef Mangler::getNameWithoutPrefix(const StringRef &MangledName) {
+  return getNameWithoutPrefix(MangledName, getDefaultDataLayout());
+}
+
+StringRef Mangler::getNameWithoutPrefix(const StringRef &MangledName,
+                                        const DataLayout &DL) {
+  StringRef DemangledName = MangledName;
+  if (DemangledName[0] == DL.getGlobalPrefix())
+    DemangledName = DemangledName.substr(1);
+  return DemangledName;
+}
+
+const DataLayout &Mangler::getDefaultDataLayout() {
+  // By taking the mangling component of the current process target triple, we
+  // can construct a reasonable default DataLayout to use when demangling.
+  static DataLayout DL(DataLayout::getManglingComponent(
+    Triple(sys::getProcessTriple())) + 1);
+  return DL;
+}
 
 void llvm::emitLinkerFlagsForGlobalCOFF(raw_ostream &OS, const GlobalValue *GV,
                                         const Triple &TT, Mangler &Mangler) {
Index: tools/lli/ChildTarget/ChildTarget.cpp
===================================================================
--- a/tools/lli/ChildTarget/ChildTarget.cpp	(revision 281247)
+++ b/tools/lli/ChildTarget/ChildTarget.cpp	(working copy)
@@ -42,7 +42,8 @@
   }
 
   auto SymbolLookup = [](const std::string &Name) {
-    return RTDyldMemoryManager::getSymbolAddressInProcess(Name);
+    auto DemangledName = Mangler::getNameWithoutPrefix(Name);
+    return RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName);
   };
 
   auto RegisterEHFrames = [](uint8_t *Addr, uint32_t Size) {
Index: tools/lli/OrcLazyJIT.h
===================================================================
--- a/tools/lli/OrcLazyJIT.h	(revision 281247)
+++ b/tools/lli/OrcLazyJIT.h	(working copy)
@@ -121,9 +121,10 @@
               return Sym;
             return CXXRuntimeOverrides.searchOverrides(Name);
           },
-          [](const std::string &Name) {
+          [this](const std::string &Name) {
+            auto DemangledName = Mangler::getNameWithoutPrefix(Name, DL);
             if (auto Addr =
-                RTDyldMemoryManager::getSymbolAddressInProcess(Name))
+                RTDyldMemoryManager::getSymbolAddressInProcess(DemangledName))
               return JITSymbol(Addr, JITSymbolFlags::Exported);
             return JITSymbol(nullptr);
           }
Index: tools/lli/lli.cpp
===================================================================
--- a/tools/lli/lli.cpp	(revision 281247)
+++ b/tools/lli/lli.cpp	(working copy)
@@ -607,6 +607,11 @@
   }
 
   if (!RemoteMCJIT) {
+    // Make sure that the memory manager is using the same DataLayout as the
+    // Execution Engine so that mangled symbol names are resolved correctly.
+    if (RTDyldMM)
+      RTDyldMM->setDataLayout(EE->getDataLayout());
+
     // If the program doesn't explicitly call exit, we will need the Exit
     // function later on to make an explicit call, so get the function now.
     Constant *Exit = Mod->getOrInsertFunction("exit", Type::getVoidTy(Context),
Index: unittests/ExecutionEngine/ExecutionEngineTest.cpp
===================================================================
--- a/unittests/ExecutionEngine/ExecutionEngineTest.cpp	(revision 281247)
+++ b/unittests/ExecutionEngine/ExecutionEngineTest.cpp	(working copy)
@@ -131,22 +131,11 @@
 }
 
 TEST_F(ExecutionEngineTest, LookupWithMangledAndDemangledSymbol) {
-  int x;
   int _x;
-  llvm::sys::DynamicLibrary::AddSymbol("x", &x);
   llvm::sys::DynamicLibrary::AddSymbol("_x", &_x);
 
-  // RTDyldMemoryManager::getSymbolAddressInProcess expects a mangled symbol,
-  // but DynamicLibrary is a wrapper for dlsym, which expects the unmangled C
-  // symbol name. This test verifies that getSymbolAddressInProcess strips the
-  // leading '_' on Darwin, but not on other platforms.
-#ifdef __APPLE__
-  EXPECT_EQ(reinterpret_cast<uint64_t>(&x),
-            RTDyldMemoryManager::getSymbolAddressInProcess("_x"));
-#else
   EXPECT_EQ(reinterpret_cast<uint64_t>(&_x),
             RTDyldMemoryManager::getSymbolAddressInProcess("_x"));
-#endif
 }
 
 }
